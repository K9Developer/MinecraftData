name: Get Recipes

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  get_items:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Create recipes directory
      run: mkdir -p recipe_trees

    - name: Run recipes script
      run: |
        cat << EOT > get_rec.py

        from itertools import product
        import requests
        import zipfile
        import io
        import json
        
        # tree_node_cache = {}
        # base_items_cache = {}
        
        def format_recipe_key(key):
            if "tag" in key:
                return "#"+key["tag"]
            elif "item" in key and type(key) is dict:
                return key["item"]
            else:
                return key
        
        def format_recipe_keys(keys):
            new_keys = {}
            for key, value in keys.items():
                if type(value) is list: value = value[0] # Important: Sometimes it allows multiple items in the same key, currently we dont handle that
                new_key = format_recipe_key(value)
                new_keys[key] = new_key
            return new_keys
        
        def premu_expanded(expanded):
            return product(*expanded)
        
        def expand_tag_items(tags, items):
            expanded_items = []
            for item in items:
                if item.startswith("#"):
                    expanded_items.extend(expand_tag_items(tags, tags[item[1:].removeprefix("minecraft:")]))
                else:
                    expanded_items.append(item)
            return expanded_items
        
        def get_all_patterns(tags, keys, pattern):
            pattern = "".join(pattern)
            new_pattern = []
            for key in pattern:
                new_pattern.append(keys.get(key))
            
            expanded = []
            for key, value in keys.items():
                expanded.append([{key: i} for i in expand_tag_items(tags, [value])])
        
            patterns = []
            for key_values in premu_expanded(expanded):
                merged_keys = {}
                for key_value in key_values:
                    merged_keys.update(key_value)
        
                curr_pattern = []
                for key in pattern:
                    curr_pattern.append(merged_keys.get(key, ' '))
                patterns.append(curr_pattern)
            return patterns
        
        def fix_pattern(pattern):
            new_pattern = []
            for i in range(3):
                if i < len(pattern):
                    for j in range(3):
                        if j < len(pattern[i]):
                            new_pattern.append(pattern[i][j])
                        else:
                            new_pattern.append(" ")
                else:
                    new_pattern.append(" "*3)
            return new_pattern
        
        def _get_blocks_to_craft_pattern(recipe):
            keys = recipe["key"]
            format_keys = format_recipe_keys(keys)
            blocks_to_craft = {}
            pattern = "".join(recipe["pattern"])
            for elem in pattern:
                if format_keys.get(elem) is None:
                    continue
                if format_keys[elem] in blocks_to_craft:
                    blocks_to_craft[format_keys[elem]] += 1
                else:
                    blocks_to_craft[format_keys[elem]] = 1
            
            return [blocks_to_craft], [{"pattern": p, "amount": recipe["result"].get("count", 1)} for p in get_all_patterns(tags, format_keys, fix_pattern(recipe["pattern"]))]
        
        def _get_blocks_to_craft_ingredients(recipe, key="ingredients"):
            ingredient_options = []
        
            for ingredient in recipe[key]:
                if isinstance(ingredient, list):
                    # For lists, we consider each item as a separate option
                    ingredient_options.append([format_recipe_key(item) for item in ingredient])
                elif isinstance(ingredient, dict):
                    if "tag" in ingredient:
                        ingredient_options.append([format_recipe_key(ingredient["tag"])])
                    elif "item" in ingredient:
                        ingredient_options.append([format_recipe_key(ingredient["item"])])
                else:
                    ingredient_options.append([format_recipe_key(ingredient)])
            
            if recipe["result"]["id"].endswith("wool"):
                ingredient_options = [[item for item in option if not item.endswith("wool") or item == "minecraft:white_wool" or (recipe["result"]["id"] == "minecraft:white_wool" and item == "minecraft:black_wool")] for option in ingredient_options]
        
            if recipe["result"]["id"].endswith("carpet"):
                ingredient_options = [[item for item in option if not item.endswith("carpet") or item == "minecraft:white_carpet" or (recipe["result"]["id"] == "minecraft:white_carpet" and item == "minecraft:black_carpet")] for option in ingredient_options] 
        
            if recipe["result"]["id"].endswith("bed"):
                ingredient_options = [[item for item in option if not item.endswith("bed") or item == "minecraft:white_bed" or (recipe["result"]["id"] == "minecraft:white_bed" and item == "minecraft:black_bed")] for option in ingredient_options]
        
            # Generate all possible combinations
            all_combinations = list(product(*ingredient_options))
            
            patterns_keys_pairs = []
            for combination in all_combinations:
                pattern = []
                keys = {}
                for i in range(9):
                    if i < len(combination):
                        pattern.append(str(i))
                        keys[str(i)] = combination[i]
                    else:
                        pattern.append(" ")
                patterns_keys_pairs.append((pattern, keys))
            
            craftings = []
            for pattern, keys in patterns_keys_pairs:
                craftings.extend(
                    [{"pattern": p, "amount": recipe["result"].get("count", 1)} for p in get_all_patterns(tags, keys, pattern)]
                )
        
            # Convert combinations to list of dictionaries
            result = []
            for combination in all_combinations:
                combo_dict = {}
                for item in combination:
                    if item in combo_dict:
                        combo_dict[item] += 1
                    else:
                        combo_dict[item] = 1
                result.append(combo_dict)
            
            return result, craftings
        
        def _get_blocks_to_craft_ingredient(recipe):
        
            ingredient = recipe["ingredient"]
            if "tag" in ingredient and type(ingredient) is dict:
                ingredient = format_recipe_key(ingredient["tag"])
            elif "item" in ingredient and type(ingredient) is dict:
                ingredient = format_recipe_key(ingredient["item"])
            else:
                ingredient = ingredient
        
            pattern = ["I"] + [" "]*8
            keys = {"I": ingredient}
            return [{ingredient: 1}], [{"pattern": p, "amount": recipe["result"].get("count", 1)} for p in get_all_patterns(tags, keys, pattern)]
        
        def get_blocks_to_craft(recipe):
            if "pattern" in recipe:
                return _get_blocks_to_craft_pattern(recipe)
            elif "ingredients" in recipe:
                return _get_blocks_to_craft_ingredients(recipe)
            elif "ingredient" in recipe and type(recipe["ingredient"]) is list:
                return _get_blocks_to_craft_ingredients(recipe, "ingredient")
            elif "ingredient" in recipe:
                return _get_blocks_to_craft_ingredient(recipe)
            else:
                return None
        
        def get_latest_version_jar():
            versions_url = "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json"
            versions = requests.get(versions_url).json()
            latest_version = versions["versions"][0]
            version_url = latest_version["url"]
            version = requests.get(version_url).json()
            client_url = version["downloads"]["client"]["url"]
            client = requests.get(client_url).content
            jar = zipfile.ZipFile(io.BytesIO(client))
            return jar
        
        def get_version_tags(jar):
            folder = r"data/minecraft/tags/item"
            tags = {}
            for file in jar.namelist():
                if file.startswith(folder) and file.endswith(".json"):
                    with jar.open(file) as f:
                        tag = json.load(f)
                        tag_name = file.split("/")[-1].split(".")[0]
                        tags[tag_name] = tag["values"]
            return tags
        
        jar = get_latest_version_jar()
        tags = get_version_tags(jar)
        data = {}
        folder = "data/minecraft/recipe"
        recipes = {}
        for file in jar.namelist():
            if file.startswith(folder) and file.endswith(".json"):
                with jar.open(file) as f:
                    recipe = json.load(f)
        
                    blocks_to_craft = get_blocks_to_craft(recipe)
        
                    if blocks_to_craft is None:
                        continue
        
                    if "result" in recipe: 
                        if recipe["result"]["id"] not in recipes:
                            recipes[recipe["result"]["id"]] = []
                        recipes[recipe["result"]["id"]].extend(blocks_to_craft[1])
        
                    for rec in blocks_to_craft[0]:
                        recipe_data = {}
                        recipe_data["result"] = recipe["result"]
                        recipe_data["blocks_to_craft"] = rec
                        recipe_data["type"] = recipe["type"]
                        if recipe["result"]["id"] not in data:  
                            data[recipe["result"]["id"]] = [recipe_data]
                        else:
                            data[recipe["result"]["id"]].append(recipe_data)
        
        with open("recipe_trees/crafts.json", "w") as f:
            json.dump(recipes, f)
        
        def fix_data(data):
            new_data = {}
            for item, recipes in data.items():
                new_recipes = []
                for recipe in recipes:
                    new_recipe = recipe.copy()
                    new_recipe["blocks_to_craft"] = {}
                    if recipe["result"].get("count") is None:
                        recipe["result"]["count"] = 1
                    target_amount = recipe["result"]["count"]
                    for block, amount in recipe["blocks_to_craft"].items():
                        new_recipe["blocks_to_craft"][block] = amount / target_amount
                    new_recipe["result"]["count"] = 1
                    new_recipes.append(new_recipe)
                new_data[item] = new_recipes
            return new_data
        
        data = fix_data(data)
        
        def get_items_needed(items):
            data = [
                [], []
            ]
            for item, amount in items.items():
                data[0].append(item)
                data[1].append(amount)
            return data
        
        def expand_items(items):
        
            expanded = []
            for item in items[0]:
                expanded.append(expand_tag_items(tags, [item]))
            return premu_expanded(expanded)
        
        def get_action(action):
            # All items we skipped can be replaced by smelt that will be in paths
            if 'crafting' in action:
                return "craft"
            elif 'smelting' in action:
                return "smelt"
            elif 'blasting' in action:
                return None # skip
            elif 'smoking' in action:
                return None # skip
            elif 'stonecutting' in action:
                return "stonecut"
            elif 'campfire_cooking' in action:
                return None # skip
            else:
                return "obtain"    
            
        
        def are_intersecting(a, b):
            return len(set(a) & set(b)) > 0
        
        BLACK_LISTED_ITEMS = [
            "minecraft:iron_boots",
            "minecraft:iron_chestplate",
            "minecraft:iron_helmet",
            "minecraft:iron_leggings",
            "minecraft:iron_sword",
            "minecraft:iron_pickaxe",
            "minecraft:iron_axe",
            "minecraft:iron_shovel",
            "minecraft:iron_hoe",
            "minecraft:chainmail_boots",
            "minecraft:chainmail_chestplate",
            "minecraft:chainmail_helmet",
            "minecraft:chainmail_leggings",
            "minecraft:chainmail_sword",
            "minecraft:chainmail_pickaxe",
            "minecraft:chainmail_axe",
            "minecraft:chainmail_shovel",
            "minecraft:chainmail_hoe",
            "minecraft:golden_boots",
            "minecraft:golden_chestplate",
            "minecraft:golden_helmet",
            "minecraft:golden_leggings",
            "minecraft:golden_sword",
            "minecraft:golden_pickaxe",
            "minecraft:golden_axe",
            "minecraft:golden_shovel",
            "minecraft:golden_hoe",
            "minecraft:iron_horse_armor",
        ]
        
        HARD_BLACK_LISTED_ITEMS = [
                "minecraft:oak_wood",
                "minecraft:spruce_wood",
                "minecraft:birch_wood",
                "minecraft:jungle_wood",
                "minecraft:acacia_wood",
                "minecraft:dark_oak_wood",
                "minecraft:cherry_wood",
                "minecraft:mangrove_wood",
                "minecraft:stripped_oak_wood",
                "minecraft:stripped_spruce_wood",
                "minecraft:stripped_birch_wood",
                "minecraft:stripped_jungle_wood",
                "minecraft:stripped_acacia_wood",
                "minecraft:stripped_dark_oak_wood",
                "minecraft:stripped_mangrove_wood",
                "minecraft:stripped_cherry_wood",
                "minecraft:stripped_oak_log",
                "minecraft:stripped_spruce_log",
                "minecraft:stripped_birch_log",
                "minecraft:stripped_jungle_log",
                "minecraft:stripped_acacia_log",
                "minecraft:stripped_dark_oak_log",
                "minecraft:stripped_mangrove_log",
                "minecraft:stripped_cherry_log",
                "minecraft:stripped_crimson_hyphae",
                "minecraft:stripped_warped_hyphae",
                "minecraft:stripped_crimson_stem",
                "minecraft:stripped_warped_stem",
                "minecraft:crimson_hyphae",
                "minecraft:warped_hyphae",
        ]
        
        def generate_tree_node(item, amount, prev_item_buffer, item_type=None, current_path=[], parent=None):
            if item in prev_item_buffer:
                return None
            
            tree_node = {
                "name": item,
                "amount": amount,
                "type": item_type,
                "paths": []
            }
        
            path_ind = 0
            for option in data[item]:
        
                if not tree_node:
                    break
                items_needed = get_items_needed(option["blocks_to_craft"])
                # patterns = option["craft_patterns"]
        
                for path in expand_items(items_needed):
                    if not tree_node:
                        break
                    if len(tree_node["paths"])-1 < path_ind:
                        tree_node["paths"].append([])
                    for ind, path_item in enumerate(path):
                        if path_item in BLACK_LISTED_ITEMS:
                            continue
                        
                        if path_item in HARD_BLACK_LISTED_ITEMS:
                            break
                            
                        if not tree_node:
                            break
        
                        bad_item = False
                        for future_option in data[path_item] if data.get(path_item) is not None else []:
                            future_items_needed = get_items_needed(future_option["blocks_to_craft"])
                            # TODO: Figure out, some item needed path_item in future_items_needed[0], instead of item in future_items_needed[0] (maybe bed, or carpet)
                            if are_intersecting(future_items_needed[0], prev_item_buffer) or item in future_items_needed[0]:
                                bad_item = True
                        
                        if bad_item or (item.endswith("dye") and path_item.endswith("dye")):
                            if item_type is None or path_item.endswith("wool") or path_item.endswith("carpet") or path_item.endswith("dye") or path_item.endswith("bed"):
                                t = get_action(option["type"])
                                if t is not None:
                                    tree_node["paths"][path_ind].append({
                                        "name": path_item,
                                        "amount": items_needed[1][ind] * amount,
                                        "type": t,
                                        "paths": []
                                    })
                            continue
        
        
                        if path_item not in data:
                            # Check if path_item is not already in the other paths
                            t = get_action(option["type"])
                            if t is not None:
                                tree_node["paths"][path_ind].append({
                                    "name": path_item,
                                    "amount": items_needed[1][ind] * amount,
                                    "type": t,
                                    "paths": []
                                })
                        else:
                            prev_item_buffer.add(item)
                            t = get_action(option["type"])
                            if t is not None:
                                node = generate_tree_node(path_item, items_needed[1][ind] * amount, prev_item_buffer.copy(), t, current_path + [path_ind] + [ind], path)
                                if node is not None:
                                    tree_node["paths"][path_ind].append(node)
                    path_ind += 1
        
            if tree_node is not None:
                tree_node["paths"] = [path for path in tree_node["paths"] if len(path) > 0]
        
            return tree_node
        
        
        def get_base_items(tree):
            def traverse(node, current_path):
                results = []
                if not node['paths']:
                    return [{'path_data': [current_path], 'item_data': {node['name']: node['amount']}}]
                
                for i, path in enumerate(node['paths']):
                    path_results = []
                    cp = current_path.copy()
                    cp.append(i)
                    for j, item in enumerate(path):
                        item_results = traverse(item, cp + [j])
                        if not path_results:
                            path_results = item_results
                        else:
                            new_results = []
                            for pr in path_results:
                                combined = {}
                                for ir in item_results:
                                    combined = {
                                        'path_data': pr['path_data'] + ir['path_data'],
                                        'item_data': {}
                                    }
        
                                    for k, v in pr['item_data'].items():
                                        if k in combined['item_data']:
                                            combined['item_data'][k] += v
                                        else:
                                            combined['item_data'][k] = v
                                    for k, v in ir['item_data'].items():
                                        if k in combined['item_data']:
                                            combined['item_data'][k] += v
                                        else:
                                            combined['item_data'][k] = v
        
                                    new_results.append(combined)
                            path_results = new_results
                    results.extend(path_results)
                
                return results
        
            all_paths = traverse(tree, [])
            
            # Combine duplicate items and sort path_data
            for path in all_paths:
                path['item_data'] = {k: sum(v for item, v in path['item_data'].items() if item == k) 
                                        for k in set(path['item_data'])}
                path['path_data'].sort()
        
            return all_paths
        
        def get_item_tree(item):
            tree = generate_tree_node(item, 1, set())
            if tree is None:
                return None
            tree["base_item_paths"] = get_base_items(tree)
            return tree
        
        all_items = set()
        for item in data:
            expanded_items = expand_tag_items(tags, [item])
            for expanded_item in expanded_items:
                all_items.add(expanded_item)
            for recipe in data[item]:
                for block in recipe["blocks_to_craft"]:
                    expanded_items = expand_tag_items(tags, [block])
                    for expanded_item in expanded_items:
                        all_items.add(expanded_item)
        
        for item in all_items.copy():
            if item not in data:
                continue
            print(f" [+] Generating tree for {item}")
            tree = get_item_tree(item)
            if tree is None:
                print(f" [!] Failed to generate tree for {item}")
                continue
            with open(f"recipe_trees/{item.removeprefix('minecraft:')}item.json", "w") as f:
                json.dump(tree, f)
        
        EOT
        python get_rec.py

    - name: Commit and push changes
      env:
        PAT: ${{ secrets.PAT }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add recipe_trees/
        git commit -m "Update recipe data" -a || echo "No changes to commit"
        git push https://${PAT}@github.com/${GITHUB_REPOSITORY}.git HEAD:${GITHUB_REF}
